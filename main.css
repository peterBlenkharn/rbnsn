body, html {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* Ensure padding and border are included in element's width and height */
}

*, *::before, *::after {
  box-sizing: inherit;
}

.div_mrfooter{
  background-color: #333;
  width: 100%;
  height: 10%;
  align-items:center;
  justify-content:center;
  display:flex;
}

.text-block-13{
  color: #fff000;
  font-size: 48px;
}

.text-block-13.b{
  font-size:36px;
}

.div-block-82{
  flex-flow:column;
  justify-content:flex-start;
  align-items:center;
  height:auto;
}

.div-block-83{
  background-color:#333;
  width: 100%;
  height:10%;
  position: fixed;
  bottom: 0;
}

.div_mr_mainblock{
  background-color:#333;
  width: 100%;
}  

.div_contentblockrow{
  display:flex;
}

.div_contentblock, .div-block-87{
  width: 25vw;
  height: 25vw;
  overflow: hidden;
}

.image_mr_main{
  aspect-ratio:auto;
  width:100%;
  height:100%;
  object-fit:cover;
}

.div_shadowbox {
    display: none; /* Hide the shadowbox by default */
    z-index: 1;
    background-color: #000000bf;
    flex-direction: column;
    justify-content: flex-start; /* Start aligning from the top */
    align-items: center; /* Center horizontally */
    width: 100%;
    height: 100%;
    position: fixed;
    inset: 0;
    padding-top: 5%;
    box-sizing: border-box;
}
.div_shadowbox_text {
  color: #fff;
  width: 75vw;
  height: 15vw;
  margin-top: 5vh;
  padding-top: 5vh;
  overflow: auto;
}

.div_shadowbox_image {
    width: 75vw;
    max-height: 50vh; /* Ensure there's a cap on height */
    margin-bottom: 2vh;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
}


If you've identified that the CSS changes are causing issues in the webview, but not in a regular browser, the differences in how webviews handle CSS could be the culprit. Let's go through some practical steps to identify and resolve the CSS issues specific to the webview.

1. Simplify and Test CSS
Start by simplifying the CSS to identify which part might be causing the issue. Remove or comment out sections of the CSS and test incrementally to see which specific styles might be causing the problem.

2. Common CSS Issues in Webview
Flexbox and Grid Support: Although most modern webviews support flexbox and grid, their behavior might still differ slightly. Check the usage of flex properties and consider simplifying or altering them.

Object Fit and Aspect Ratio: Some older webview versions might not fully support CSS properties like object-fit or aspect-ratio. You might need to use fallback methods to ensure compatibility.

Viewport and Scaling Issues: Webviews might interpret viewport settings differently. Make sure the viewport meta tag is correctly configured.

3. Step-by-Step Troubleshooting
Hereâ€™s how you can methodically troubleshoot and adjust your CSS:

A. Test Flexbox Compatibility
If the issue seems related to the layout not displaying correctly, adjust the flexbox settings:

css
Copy code
.div_shadowbox {
    display: none; /* Hide the shadowbox by default */
    z-index: 1;
    background-color: #000000bf;
    flex-direction: column;
    justify-content: flex-start; /* Start aligning from the top */
    align-items: center; /* Center horizontally */
    width: 100%;
    height: 100%;
    position: fixed;
    inset: 0;
    padding-top: 5%;
    box-sizing: border-box;
}

.div_shadowbox_image {
    width: 75vw;
    max-height: 50vh; /* Ensure there's a cap on height */
    margin-bottom: 2vh;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
}

.image_shadowbox {
    width: 100%;
    height: auto;
    object-fit: contain; /* Use 'contain' for better compatibility */
}

  


